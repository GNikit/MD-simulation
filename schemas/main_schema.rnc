# The SPUD base schema
# include "spud_base.rnc"
# TODO: force constructor compression to false when enabling and vice versa

lattice_type =
(
    ## Available initial lattice formations:
    ##
    ## SC: Simple Cubic
    ##
    ## FCC: Face Centred Cubic
    ##
    ## BCC: Body Centred Cubic
    element lattice { ("SC" | "FCC" | "BCC"| "RANDOM")
        # ## Randomise the positions of the particles in the lattice
        # ## using a normal distribution.
        # element random {"true",
        #     ## The variance of the normal distribution
        #     element variance {xsd:double} }?
    }
)

constructor_types =
(
    ## Constructor initialisation for MD or phase_transition objects.
    element constructor {

        ## Number of iteration steps the MD algorithm should run for.
        element steps { xsd:integer },

        ## Number of particles per axis (x, y, z).
        ## This in combination with the lattice formation will yield
        ## a total number of particles equal to:
        ##
        ## SC: particles_per_axis **3
        ##
        ## FCC: particles_per_axis **3 *4
        ##
        ## BCC: particles_per_axis **3 *2
        element particles_per_axis { xsd:integer },

        lattice_type
    }
)

options =
(
    ## Set a series of options for fine-tunning an MD run
    element options {
        ## Output directory for the files to be produced during a simulation.
        element output_dir { xsd:string }?,

        ## Set the flag for incremental resizing of the simulation box.
        ## Set to true for phase transition studies else set to false.
        element compression { "true" | "false" }?,

        ## Accuracy of the Radial Distribution Function (RDF).
        ## A large number of bins will result into a very accurate RDF,
        ## however if the simulation is short (small number of steps) the
        ## results will be dominated by statistical noise.
        element rdf_bins { xsd:integer }?,

        ## If enabled will save in ASCII format the positions of all the
        ## particles for the entire simulation.
        ## The datafiles can then be viewed with the python tools.
        ## NOTE: For large simulations this will be slow.
        element track_particles { "true" | "false" }?,

        ## An equilibration period for the RDF in time step units.
        ## The RDF will begin to be collected rdf_equilibrate steps
        ## from the start of the simulation.
        element rdf_equilibrate { xsd:integer }?
    }
)

simulation_name =
(
    ## Name of the simulation, to be used as prefix to all output files.
    element simulation_name { xsd:string }
)

simulation_potentials =
(
    ## Available pair potentials:
    ##
    ## BIP: Bounded Inverse Power, 1/(r**2 + a**2)**n
    ##
    ## GCM: Gaussian Core Model, exp(-r**2)
    ##
    ## EXP: Exponential Potential, A * exp(-r**n)
    ##
    ## LJ: Lennard-Jones Potential, 1/r**12 - 1/r**6
    ##
    element pp {
        "BIP" | "EXP" | "GCM" | "LJ"
    }
)

simulation_parameters =
(
    ## Fluid density (unitless).
    element rho { xsd:double },

    ## Fluid temperature (unitless).
    element T { xsd:double },

    ## Pair potential strength.
    ## Normal values are between 6 - 12.
    element n { xsd:double },

    ## Softening parameter. Only applicable for BIP and EXP pair potentials.
    ## Normal values usually range between 0 - 2.0. With 0 corresponding to
    ## no-smoothening and 2.0 to a very smoothed fluid.
    element A { xsd:double }

)

simulation_single =
(
    simulation_name,

    simulation_potentials,

    simulation_parameters
)

simulation_compress =
(
    simulation_name,

    simulation_potentials,

    ## The density that the compression aims to reach.
    element final_density { xsd:double },

    ## The density increment used to increase/decrease the current density
    ## in order to meed the final density.
    element density_increment { xsd:double },

    simulation_parameters
)

simulation =
(
    ## Input variables for a single MD::simulation.
    element simulation_input {

        attribute name { "NormalRun" },

        simulation_single
    }|
    ## Input variables for a compression/phase transition run.
    element simulation_input {

        attribute name { "CompressionRun" },

        simulation_compress
    }|
    ## Run a forward series of compressions/expansions followed by
    ## expansions/compressions in the opposite direction of the phase diagram.
    element simulation_input {

        attribute name { "ReverseCompressionRun" },

        simulation_compress
    }
)

start =
(
    ## Input variables for a molecular dynamics simulation
    element input_variables {

        constructor_types,

        options?,

        simulation,

        ## Enable for unit testing.
        element enable_testing { "true" | "false" }
    }
)